{"version":3,"sources":["logo.svg","components/Search.js","components/ProductRow.js","components/ProductCategoryRow.js","components/ProductTable.js","container/FilterableProductTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","type","placeholder","React","Component","ProductRow","product","this","props","name","stocked","style","color","price","ProductCategoryRow","category","colSpan","ProductTable","rows","lastCategory","products","forEach","push","key","FilterableProductTable","Search","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,qICkB5BC,G,uLAbX,OACE,8BACE,2BAAOC,KAAK,OAAOC,YAAY,cAC/B,2BACE,2BAAOD,KAAK,aACX,IAFH,oC,GANgBE,IAAMC,YCkBfC,E,iLAhBP,IAAMC,EAAUC,KAAKC,MAAMF,QACrBG,EAAOH,EAAQI,QACjBJ,EAAQG,KACR,0BAAME,MAAO,CAAEC,MAAO,QACjBN,EAAQG,MAGjB,OACI,4BACI,4BAAKA,GACL,4BAAKH,EAAQO,Y,GAZJV,IAAMC,WCahBU,E,iLAXP,IAAMC,EAAWR,KAAKC,MAAMO,SAC5B,OACI,4BACI,wBAAIC,QAAQ,KACPD,Q,GANYZ,IAAMC,WCqCxBa,E,iLAjCP,IAAMC,EAAO,GACTC,EAAe,KAkBnB,OAhBAZ,KAAKC,MAAMY,SAASC,QAAQ,SAACf,GACrBA,EAAQS,WAAaI,GACrBD,EAAKI,KACD,kBAAC,EAAD,CACIP,SAAUT,EAAQS,SAClBQ,IAAKjB,EAAQS,YAGzBG,EAAKI,KACD,kBAAC,EAAD,CACIhB,QAASA,EACTiB,IAAKjB,EAAQG,QAErBU,EAAeb,EAAQS,WAIvB,+BACI,+BACI,4BACI,oCACA,uCAGR,+BAAQG,Q,GA7BGf,IAAMC,WCWlBoB,E,iLATP,OACI,6BACI,kBAACC,EAAD,MACA,kBAAC,EAAD,CAAcL,SAAUb,KAAKC,MAAMY,gB,GALdjB,IAAMC,WC2B5BsB,G,uLAVX,OAEE,yBAAKC,UAAU,iBACb,kBAAC,EAAD,CAAwBP,SAZX,CACf,CAAEL,SAAU,iBAAkBF,MAAO,SAAUH,SAAS,EAAMD,KAAM,YACpE,CAAEM,SAAU,iBAAkBF,MAAO,QAASH,SAAS,EAAMD,KAAM,YACnE,CAAEM,SAAU,iBAAkBF,MAAO,SAAUH,SAAS,EAAOD,KAAM,cACrE,CAAEM,SAAU,cAAeF,MAAO,SAAUH,SAAS,EAAMD,KAAM,cACjE,CAAEM,SAAU,cAAeF,MAAO,UAAWH,SAAS,EAAOD,KAAM,YACnE,CAAEM,SAAU,cAAeF,MAAO,UAAWH,SAAS,EAAMD,KAAM,cAKlE,S,GAlBYL,cCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.da31848a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nclass SearchBar extends React.Component {\n\n  render() {\n    return (\n      <form>\n        <input type=\"text\" placeholder=\"Search...\" />\n        <p>\n          <input type=\"checkbox\" />\n          {' '}\n          Only show products in stock\n        </p>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar","import React from 'react'\n\nclass ProductRow extends React.Component {\n    render() {\n        const product = this.props.product;\n        const name = product.stocked ?\n            product.name :\n            <span style={{ color: 'red' }}>\n                {product.name}\n            </span>;\n\n        return (\n            <tr>\n                <td>{name}</td>\n                <td>{product.price}</td>\n            </tr>\n        );\n    }\n}\n\nexport default ProductRow","import React from 'react'\n\nclass ProductCategoryRow extends React.Component {\n    render() {\n        const category = this.props.category;\n        return (\n            <tr>\n                <th colSpan=\"2\">\n                    {category}\n                </th>\n            </tr>\n        );\n    }\n}\n\nexport default ProductCategoryRow;","import React from 'react'\nimport ProductRow from './ProductRow'\nimport ProductCategoryRow from './ProductCategoryRow'\n\nclass ProductTable extends React.Component {\n    render() {\n        const rows = [];\n        let lastCategory = null;\n\n        this.props.products.forEach((product) => {\n            if (product.category !== lastCategory) {\n                rows.push(\n                    <ProductCategoryRow\n                        category={product.category}\n                        key={product.category} />\n                );\n            }\n            rows.push(\n                <ProductRow\n                    product={product}\n                    key={product.name} />\n            );\n            lastCategory = product.category;\n        });\n\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Price</th>\n                    </tr>\n                </thead>\n                <tbody>{rows}</tbody>\n            </table>\n        );\n    }\n}\n\nexport default ProductTable","import React from 'react'\nimport SearchBar from '../components/Search'\nimport ProductTable from '../components/ProductTable'\n\nclass FilterableProductTable extends React.Component {\n    render() {\n        return (\n            <div>\n                <SearchBar />\n                <ProductTable products={this.props.products} />\n            </div>\n        );\n    }\n}\n\nexport default FilterableProductTable","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport FilterableProductTable from './container/FilterableProductTable'\nimport './App.css';\n\nclass App extends Component {\n  \n\n\n\n  render() {\n    \n    const PRODUCTS = [\n      { category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football' },\n      { category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball' },\n      { category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball' },\n      { category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch' },\n      { category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5' },\n      { category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7' }\n    ];\n\n    return (\n     \n      <div className=\"App container\">\n        <FilterableProductTable products={PRODUCTS} />,\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}